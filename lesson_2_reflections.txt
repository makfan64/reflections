GWhat happens when you initialize a repository? Why do you need to do it?

     git init prepares a directory for its intiail commit by setting
     up the metdata. Otherwise, git would have no way of knowing that
     you intended this directory to be a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     The staging area represents files that you are ready to commit to
     the repository. This indicates they are at some logical
     state. Files in the working directory might include things you
     never intend to commit, such as random notes, test data,
     etc. This also allows you to commit files separately when
     desired.

How can you use the staging area to make sure you have one commit per logical
change?

     By adding files to the staging area when they are logically
     complete, you can keep a change grouped together.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

     Branches are useful when to avoid destabilizing the main branch
     when trying experimental changes, adding large new features or
     perhaps when making a tricky bug fix.

How do the diagrams help you visualize the branch structure?

     I was very confused about the detached head concept, but now that
     I have seen how commits point back to the previous commit and
     that branches allow two or more commits to point back to the same
     parent commit, I understand the concept.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

     The changes from the named branch are merged into the current
     branch. It is important to check what branch is checked out
     before doing a merge. Git will create a new parent relationship
     that allows you to see the history of both branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

     Many merges can be completed automatically with little to no
     risk, and it saves time to do so. Manual merges can actually
     introduce subtle errors if the merger doesn't examine the
     differences very carefully after merging.
